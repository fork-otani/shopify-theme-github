link(rel="stylesheet" href="components/c-form.css")
link(rel="stylesheet" href="components/shopselect/shopselect.css")
link(rel="stylesheet" href="components/js-modal/js-modal.css")
//- script(src='assets/vue.min.js')
<script src="https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js"></script><!-- デバッグ版-->

script#shop-select(type='text/x-template')
  div
    input(type='hidden' name='properties[受取店舗の加盟店コード]' v-model='select.shop.code' :disabled='!hasSelectShop')
    input(type='hidden' name='properties[受取店舗の加盟店名称]' v-model='select.shop.name' :disabled='!hasSelectShop')
    button.btn.btn--neutral(type="button" @click="isModal=true" v-if='!hasSelectShop') 商品を受け取る自転車屋さんを選ぶ
    template(v-if="hasSelectShop")
      .shopselect-footer
        p 店舗 :
          span(v-text='tmp.shop.name')
        p 住所 :
          span(v-text='tmp.shop.address_name')
        p 電話番号 :
          span(v-text='tmp.shop.phone')
        button.btn.btn--input.btn--secondary.btn--outline(type="button" @click='select.shop={};tmp.shop={}') もう一度選びなおす
    template(v-if="!hasSelectShop")
      transition
        .shopselect-modal(v-show="isModal")
          .js-modal-overlay(@click="tmp.area=select.area;tmp.shop=select.shop;")
          .js-modal-container
            .js-modal-content
              .js-modal-content__close.js-modal-close(@click="isModal=false")
                include ../../../../snippets/icon-close.liquid
              .js-modal-content__body
                .shopselect-area(v-if="!hasTmpArea")
                  .shopselect-header
                    .shopselect-title ご希望のエリアを選択してください。(複数選択可能)
                  .shopselect-body
                    div(v-show="isEmpty(areaList)") データにアクセスできませんでした
                    .shopselect-area__list.c-form__group(v-show="!isEmpty(areaList)")
                      template(v-for='area in areaList')
                        label.c-form__option.c-checkbox
                          input(type="checkbox" :name="$id('area')" :value="area.code" v-model="checkArea")
                          span(v-text='area.name')
                  .shopselect-bottom
                    button.btn.btn--primary(type="button" @click='onSelectTmpArea' :disabled='!hasCheckArea' :class="{'is-disabled':!hasCheckArea}") 自転車屋さんを選択する

                .shopselect-shop(v-if='hasTmpArea')
                  .shopselect-header
                    .shopselect-title 商品を受取る自転車屋さんを選んでください。({{shopAreaCount}}件見つかりました。)
                  .shopselect-body
                    template(v-for='(shopArea,index) in shopAreaList' :key="index")
                      .shoplist__area(v-text="shopArea.name" :key="index")
                      .shoplist__list.product__subs__group(:key="index")
                        template(v-for='(shop,index) in shopArea.shops')
                          label.shoplist__item.product__subs__option(@click='onSelectTmpShop(shop.code)' :class="{'shoplist__item--active': tmp.shop.code === shop.code }" :key="shop.code")
                            input(type='radio' :name="$id('shop')" :value="shop.code")
                            dl.shoplist__info
                              dt.shoplist__info__title(v-text="shop.name")
                              dd.shoplist__info__data(v-text="shop.address_name")
                              dd.shoplist__info__data(v-text="shop.phone")
                              //- dd.shoplist__item__data(v-text="shop.holiday")
                              //- dd.shoplist__item__data(v-text="shop.access")
                  .shopselect-bottom
                    button.btn.btn--secondary.btn--outline(type="button" @click='tmp.area={};') エリアを選択に戻る
                    button.btn.btn--primary(type="button" @click='onSelectShop' data-id="shopselect" :class="{'is-disabled':!hasTmpShop}" :disabled='!hasTmpShop') 自転車屋さんを選択する

script.
  Vue.use((Vue) => {
    let uuid = 0;
    Vue.mixin({
      beforeCreate: function() {
        this.uuid = uuid.toString();
        uuid += 1;
      },
    });
    Vue.prototype.$id = function(id) {
      return "uid-" + this.uuid + "-" + id;
    };
  });
  Vue.component('shop-select', {
    template: "#shop-select",
    props:{
      api:{ //apiから取ったデータ
        area:{},
        shop:{},
      },
    },
    data(){
      return{
        tmp:{ //画面遷移で選んだもの
          area:[],
          shop:{},
        },
        select:{ //最終的に選択しているもの
          area:[],
          shop:{},
        },
        isModal:false,
        checkArea:[],
      }
    },
    methods:{
      isEmpty(obj){
        return !Object.keys(obj).length > 0;
      },
      onSelectTmpArea(){
        const area_list = [];
        this.checkArea.forEach(address_code => {
          const area = this.api.area.items.find(item => item.code === address_code)
          area_list.push(area)
        });
        this.tmp.area = area_list;
      },
      onSelectTmpShop(code){
        this.tmp.shop = this.getShopData(code);
      },
      onSelectShop(){
        this.select.area = this.tmp.area;
        this.select.shop = this.tmp.shop;
        this.isModal = false;
      },
      getShopData(code){
        return this.api.shop.items.find(shop => shop.code === code)
      }
    },
    computed:{
      addressCodeAll(){
        const addresses = [];
        if(!this.isEmpty(this.api.shop)){
          this.api.shop.items.forEach(item => {
            if(!addresses.includes(item.address_code)){
              addresses.push(item.address_code)
            }
          })
          addresses.sort();
        }
        return addresses;
      },
      areaList(){
        let area_list = [];
        if(!this.isEmpty(this.api.area) && !this.isEmpty(this.api.shop)){
          this.addressCodeAll.forEach(address_code => {
            const area = this.api.area.items.find(item => item.code === address_code)
            area_list.push({
              code:area.code,
              longname:area.name,
              name:area.address[1].name,
              ruby:area.address[1].ruby
            })
          })
        }
        return area_list;
      },
      shopAreaList(){
        const data = [];
        this.tmp.area.forEach( area => {
          const area_item = {
            code:area.code,
            longname:area.name,
            name:area.address[1].name,
            ruby:area.address[1].ruby,
            shops: this.api.shop.items.filter(shop => shop.address_code === area.code)
          };
          data.push(area_item);
        })
        return data;
      },
      shopAreaCount(){
        let count = 0;
        this.shopAreaList.forEach(area => count += area.shops.length)
        return count;
      },
      hasCheckArea(){
        return this.checkArea.length > 0;
      },
      hasTmpArea(){
        return this.tmp.area.length > 0;
      },
      hasTmpShop(){
        return !this.isEmpty(this.tmp.shop);
      },
      hasSelectShop(){
        this.isModal=false;
        return !this.isEmpty(this.select.shop);
      },

    },
    mounted(){
      //- fetch('assets/arealist.json')
      //-   .then(response => response.json())
      //-   .then(data => this.api.area = data)
      //- fetch('assets/shoplist.json')
      //-   .then(response => response.json())
      //-   .then(data => this.api.shop = data)
      document.querySelector('.product__submit__add[data-add-to-cart]').disabled = true;
      this.$watch('select.shop', currentValue => {
        document.querySelector('.product__submit__add[data-add-to-cart]').disabled = !this.hasSelectShop;
      });
    },
    watch:{
      api:{
        handler: function (val, oldVal) {
          console.log('someObj changed')
        },
        deep: true
      }
    }
  });


script(src='//code.jquery.com/jquery-3.6.0.min.js' type='text/javascript')
script.
  function parseJson(json){return json;}
  var apiAddressURL = 'http://dp.navitime.biz/v1/10354330/address/list?limit=100&address=13&signature=VtEMf_MAl2IPGibfJldd1sYSZxE=';
  var apiShopURL = 'http://dp.navitime.biz/s1/10354330/shop/list?limit=100&code=D05268&address=13&signature=8bJykp8rP2Qq0UjKpRSk8E29KPE=';
  var apiData = {
    area:{},
    shop:{}
  }
  new $.ajax({
    url: apiAddressURL,
    type: 'GET',
    dataType: 'jsonp',
    jsonpCallback: 'parseJson',
    async: false,
    cache:true
  }).then(response => {
    apiData.area = response;
    return $.ajax({
      url: apiShopURL,
      type: 'GET',
      dataType: 'jsonp',
      jsonpCallback: 'parseJson',
      cache:true
    })
  })
  .then(response => {
    apiData.shop = response;
  })


script.
  new Vue({
    el: '#app',
    data:{
      apiData:apiData
    }
  })
  new Vue({
    el: '#app2',
    data:{
      apiData:apiData
    }
  })

#app
  shop-select(:api="apiData")
#app2
  shop-select(:api="apiData")
