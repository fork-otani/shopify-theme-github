link(rel="stylesheet" href="components/c-form.css")
link(rel="stylesheet" href="components/shopselect/shopselect.css")
link(rel="stylesheet" href="components/js-modal/js-modal.css")

//- script(src='//code.jquery.com/jquery-3.6.0.min.js' type='text/javascript')
//- script(src='assets/js-modal.js' type='text/javascript')
script.
  function ShopSelectComponent(index='') {
    return {
      api:{ //apiから取ったデータ
        area:{},
        shop:{},
      },
      tmp:{ //画面遷移で選んだもの
        area:[],
        shop:{},
      },
      select:{ //最終的に選択しているもの
        area:[],
        shop:{},
      },
      name:'shop' + index,
      isModal:false,
      checkArea:[],
      isEmpty(obj){
        return !Object.keys(obj).length > 0;
      },
      get addressCodeAll(){ //apiで取得したaddress_code一覧
        const addresses = [];
        if(!this.isEmpty(this.api.shop)){
          this.api.shop.items.forEach(item => {
            if(!addresses.includes(item.address_code)){
              addresses.push(item.address_code)
            }
          })
          addresses.sort();
        }
        return addresses;
      },
      get areaList(){
        let area_list = [];
        if(!this.isEmpty(this.api.area) && !this.isEmpty(this.api.shop)){
          this.addressCodeAll.forEach(address_code => {
            const area = this.api.area.items.find(item => item.code === address_code)
            area_list.push({
              code:area.code,
              longname:area.name,
              name:area.address[1].name,
              ruby:area.address[1].ruby
            })
          })
        }
        return area_list;
      },
      get shopAreaList(){
        const data = [];
        this.tmp.area.forEach( area => {
          const area_item = {
            code:area.code,
            longname:area.name,
            name:area.address[1].name,
            ruby:area.address[1].ruby,
            shops: this.api.shop.items.filter(shop => shop.address_code === area.code)
          };
          data.push(area_item);
        })
        return data;
      },
      get hasCheckArea(){
        return this.checkArea.length > 0;
      },
      get hasTmpArea(){
        return this.tmp.area.length > 0;
      },
      get hasTmpShop(){
        return !this.isEmpty(this.tmp.shop);
      },
      get hasSelectShop(){
        return !this.isEmpty(this.select.shop);
      },
      get shopAreaCount(){
        let count = 0;
        this.shopAreaList.forEach(area => count += area.shops.length)
        return count;
      },
      onSelectTmpArea(){
        const area_list = [];
        this.checkArea.forEach(address_code => {
          const area = this.api.area.items.find(item => item.code === address_code)
          area_list.push(area)
        });
        this.tmp.area = area_list;
      },
      onSelectTmpShop(code){
        this.tmp.shop = this.getShopData(code);
      },
      onSelectShop(){
        this.select.area = this.tmp.area;
        this.select.shop = this.tmp.shop;
        this.isModal = false;
      },
      getShopData(code){
        return this.api.shop.items.find(shop => shop.code === code)
      },
      initialize(){
        //- fetch('http://dp.navitime.biz/v1/10354330/address/list?limit=100&address=13&level-to=&signature=xx7SgXTdeMtLY86AePtFkpcp3Jc=')
        fetch('assets/arealist.json')
          .then(response => response.json())
          .then(data => this.api.area = data)
        fetch('assets/shoplist.json')
          .then(response => response.json())
          .then(data => this.api.shop = data)
        document.querySelector('.product__submit__add[data-add-to-cart]').disabled = true;
        this.$watch('select.shop', currentValue => {
          document.querySelector('.product__submit__add[data-add-to-cart]').disabled = !this.hasSelectShop;
        });
      }
    }
  }
mixin dummy()
  |
mixin test()
  div(x-data='ShopSelectComponent()' x-init="initialize")
    input(type='hidden' name='properties[受取店舗の加盟店コード]' x-model='select.shop.code' :disabled='!hasSelectShop')
    input(type='hidden' name='properties[受取店舗の加盟店名称]' x-model='select.shop.name' :disabled='!hasSelectShop')
    button.btn.btn--secondary(type="button" @click="isModal=true" x-show='!hasSelectShop') 商品を受け取る自転車屋さんを選ぶ
    template(x-if="hasSelectShop")
      .shopselect-footer(x-show="hasSelectShop" x-cloak)
        p 店舗 :
          span(x-text='tmp.shop.name')
        p 住所 :
          span(x-text='tmp.shop.address_name')
        p 電話番号 :
          span(x-text='tmp.shop.phone')
        button.btn.btn--input.btn--secondary.btn--outline(type="button" @click='select.shop={};tmp.shop={}') もう一度選びなおす

    template(x-if="isModal")
      .shopselect-modal(x-show="isModal" x-cloak x-transition)
          .js-modal-overlay(@click="tmp.area=select.area;tmp.shop=select.shop;")
          .js-modal-container
            .js-modal-content
              .js-modal-content__close.js-modal-close(@click="isModal=false")
                include ../../../../snippets/icon-close.liquid
              .js-modal-content__body
                .shopselect-area(x-show="!hasTmpArea")
                  .shopselect-header
                    .shopselect-title ご希望のエリアを選択してください。(複数選択可能)
                  .shopselect-body
                    div(x-show="isEmpty(areaList)") データにアクセスできませんでした
                    .shopselect-area__list.c-form__group(x-show="!isEmpty(areaList)")
                      template(x-for='area in areaList')
                        label.c-form__option.c-checkbox
                          input(type="checkbox" :value="area.code" x-model="checkArea")
                          span(x-text='area.name')
                  .shopselect-bottom
                    button.btn(type="button" @click='onSelectTmpArea' :disabled='!hasCheckArea' :class="{'is-disabled':!hasCheckArea}") 自転車屋さんを選択する

                .shopselect-shop(x-show='hasTmpArea')
                  .shopselect-header
                    .shopselect-title 商品を受取る自転車屋さんを選んでください。(<span x-text="shopAreaCount"></span>件見つかりました。)
                  .shopselect-body
                    template(x-for='(shopArea,index) in shopAreaList')
                      div(:data-shops="JSON.stringify(shopArea.shops)" :key="index")
                        .shoplist__area(x-text="shopArea.name")
                        .shoplist__list.product__subs__group(x-data="{shops:JSON.parse($el.parentElement.dataset.shops)}")
                          template(x-for='shop in shops')
                            label.shoplist__item.product__subs__option(@click='onSelectTmpShop(shop.code)' :class="{'shoplist__item--active': tmp.shop.code === shop.code }" :key="shop.code")
                              input(type='radio' :name='name' :value="shop.code")
                              dl.shoplist__info
                                dt.shoplist__info__title(x-text="shop.name")
                                dd.shoplist__info__data(x-text="shop.address_name")
                                dd.shoplist__info__data(x-text="shop.phone")
                                //- dd.shoplist__info__data(x-text="shop.holiday")
                                //- dd.shoplist__info__data(x-text="shop.access")

                  .shopselect-bottom
                    button.btn.btn--secondary.btn--outline(type="button" @click='tmp.area={};') エリアを選択に戻る
                    button.btn.btn--primary(type="button" @click='onSelectShop' :class="{'is-disabled':!hasTmpShop}" :disabled='!hasTmpShop') 自転車屋さんを選択する

  button.btn.product__submit__add(data-add-to-cart)
    span(data-add-to-cart-text) カートに追加

+test()

+test()

//- script(src='//cdn.jsdelivr.net/gh/alpinejs/alpine@v2.8.2/dist/alpine.min.js' type='text/javascript')
script(defer src='https://unpkg.com/alpinejs@3.3.4/dist/cdn.min.js')


.st-doc
  :md
    # 防犯登録の店舗選択
    APIの仕様が確認できるまでの仮の構成
    モーダルの機能自体は.js-modalの方で実装している
    モーダルの動きに合わせて何かする場合は@clickとかで動作を追加すればOK
