//- link(rel="stylesheet" href="components/c-customer.css")
//- script.


main#MainContent.main-content(role='main')
  link(href='//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css' rel='stylesheet' type='text/css' media='all')
  link(rel='stylesheet' href='//cdn.shopify.com/s/files/1/0594/0130/6295/t/2/assets/add.css?v=3735936458007692391')
  style.
    .form-item{margin-bottom:30px}
    .c-form__group{margin-top:-5px;}
    .select__fieldset .select__label{margin-bottom:0px;font-weight:bold;}
    .radio__legend__label{font-weight:bold;}
    @media only screen and (max-width: 479px) {
      .radio_fieldset{margin-bottom:0;}
    }
    @media only screen and (min-width: 480px) {
      .c-form__group .c-form__option{padding:10px 20px;}
    }
  section#Register.center.account
    section.col
      .customer-register
        h2.theme 新規会員登録
        p
          | 既にアカウントをお持ちですか？
          span.text-link
            a(href='/account/login') ログインはこちらから
          | .
        form#create_customer(method='post' accept-charset='UTF-8' x-data="form()" @submit="submit" @change="update" @focusout="update" @input="update" x-cloak)
          input(type='hidden' name='form_type' value='create_customer')
          input(type='hidden' name='utf8' value='✓')

          .form-item.select__fieldset(style='max-width:none')
            label.select__label 氏名
            .form-field
              input#last_name.large(type='text' name='customer[last_name]' placeholder='姓' :class='{"input-error":valid("customer[last_name]").errorMessage}' data-rules='["required"]'  x-model='valid("customer[last_name]").value')
              p.error-message(x-show='valid("customer[last_name]").errorMessage' x-text='valid("customer[last_name]").errorMessage')
              input#first_name.large(type='text' name='customer[first_name]' placeholder='名' :class='{"input-error":valid("customer[first_name]").errorMessage}' data-rules='["required"]' x-model='valid("customer[first_name]").value')
              p.error-message(x-show='valid("customer[first_name]").errorMessage' x-text='valid("customer[first_name]").errorMessage')
          .form-item.select__fieldset(style='max-width:none')
            label.select__label 氏名（カナ）
            .form-field
              input#last_name_kana.large(type='text' name='customer[note][姓（カナ）]' placeholder='姓（カナ）' :class='valid("customer[note][姓（カナ）]").errorMessage ? "input-error":""' data-rules='["required"]' x-model='valid("customer[note][姓（カナ）]").value')
              p.error-message(x-show='valid("customer[note][姓（カナ）]").errorMessage' x-text='valid("customer[note][姓（カナ）]").errorMessage')
              input#first_name_kana.large(type='text' name='customer[note][名（カナ）]' size='30' placeholder='名（カナ）' :class='{"input-error":valid("customer[note][名（カナ）]").errorMessage}' data-rules='["required"]' x-model='valid("customer[note][名（カナ）]").value')
              p.error-message(x-show='valid("customer[note][名（カナ）]").errorMessage' x-text='valid("customer[note][名（カナ）]").errorMessage')

          .form-item.select__fieldset(style='max-width:none')
            label.select__label メールアドレス
            .form-field
              input#email.large(type='email' name='customer[email]' placeholder='メールアドレス' :class='valid("customer[email]").errorMessage ? "input-error":""' data-rules='["required","email"]' x-model='valid("customer[email]").value')
              p.error-message(x-show='valid("customer[email]").errorMessage' x-text='valid("customer[email]").errorMessage')
          .form-item.select__fieldset(style='max-width:none')
            label.select__label パスワード
            .form-field
              input#password.large.password(type='password' name='customer[password]' placeholder='パスワード(5文字以上)' :class='{"input-error":valid("customer[password]").errorMessage}' data-rules='["required","minLength:5"]' x-model='valid("customer[password]").value')
              p.error-message(x-show='valid("customer[password]").errorMessage' x-text='valid("customer[password]").errorMessage')

          .form-item.select__fieldset(style='max-width:none')
            div
              label.select__label(for='date_of_birth') 生年月日
              input#date_of_birth.large(type='text' name='customer[note][生年月日]' readonly placeholder='生年月日' :class='{"input-error":valid("customer[note][生年月日]").errorMessage}' @blur="date" data-rules='["required"]' x-model='valid("customer[note][生年月日]").value')
            p.error-message(x-show='valid("customer[note][生年月日]").errorMessage' x-text='valid("customer[note][生年月日]").errorMessage')

          .form-item(style='max-width:none' data-name='customer[note][性別]' data-rules='["requiredChoice"]')
            fieldset.radio__fieldset
              legend.radio__legend.radio__legend--flex
                span.radio__legend__label 性別
            .c-form__group
              label.c-radio.c-form__option
                input(type='radio' value='男' name='customer[note][性別]' x-model='valid("customer[note][性別]").value')
                span 男
              label.c-radio.c-form__option
                input(type='radio' value='女' name='customer[note][性別]' x-model='valid("customer[note][性別]").value')
                span 女
              label.c-radio.c-form__option
                input(type='radio' value='その他' name='customer[note][性別]' x-model='valid("customer[note][性別]").value')
                span その他
            p.error-message(x-show='valid("customer[note][性別]").errorMessage' x-text='valid("customer[note][性別]").errorMessage')

          .form-item.select__fieldset(style='max-width:none' data-name='customer[note][都道府県]' data-rules='["requiredChoice"]')
            label.select__label お住まいの地域
            select(name='customer[note][都道府県]' x-model='valid("customer[note][都道府県]").value')
              option(value selected) 都道府県
              option(value='北海道') 北海道
              option(value='青森県') 青森県
              option(value='宮城県') 宮城県
              option(value='秋田県') 秋田県
              option(value='山形県') 山形県
              option(value='福島県') 福島県
              option(value='茨城県') 茨城県
              option(value='栃木県') 栃木県
              option(value='群馬県') 群馬県
              option(value='埼玉県') 埼玉県
              option(value='千葉県') 千葉県
              option(value='東京都') 東京都
              option(value='神奈川県') 神奈川県
              option(value='新潟県') 新潟県
              option(value='富山県') 富山県
              option(value='石川県') 石川県
              option(value='福井県') 福井県
              option(value='山梨県') 山梨県
              option(value='長野県') 長野県
              option(value='岐阜県') 岐阜県
              option(value='静岡県') 静岡県
              option(value='愛知県') 愛知県
              option(value='三重県') 三重県
              option(value='滋賀県') 滋賀県
              option(value='京都府') 京都府
              option(value='大阪府') 大阪府
              option(value='兵庫県') 兵庫県
              option(value='奈良県') 奈良県
              option(value='和歌山県') 和歌山県
              option(value='鳥取県') 鳥取県
              option(value='島根県') 島根県
              option(value='岡山県') 岡山県
              option(value='広島県') 広島県
              option(value='山口県') 山口県
              option(value='徳島県') 徳島県
              option(value='香川県') 香川県
              option(value='愛媛県') 愛媛県
              option(value='高知県') 高知県
              option(value='福岡県') 福岡県
              option(value='佐賀県') 佐賀県
              option(value='長崎県') 長崎県
              option(value='熊本県') 熊本県
              option(value='大分県') 大分県
              option(value='宮崎県') 宮崎県
              option(value='鹿児島県') 鹿児島県
              option(value='沖縄県') 沖縄県
            p.error-message(x-show='valid("customer[note][都道府県]").errorMessage' x-text='valid("customer[note][都道府県]").errorMessage')
            input#area.large(type='text' name='customer[note][市区町村]' placeholder='市区町村' style='width:100%;margin-top:0;' x-model='valid("customer[note][市区町村]").value' data-rules='["required"]')
            p.error-message(x-show='valid("customer[note][市区町村]").errorMessage' x-text='valid("customer[note][市区町村]").errorMessage')


          .form-item(style='max-width:none' data-name='customer[note][同居家族構成]' data-rules='["requiredChoice"]')
            fieldset.radio__fieldset
              legend.radio__legend.radio__legend--flex
                span.radio__legend__label 同居家族構成
            .c-form__group
              label.c-checkbox.c-form__option
                input(type='checkbox' value='本人' name='customer[note][同居家族構成][]' x-model='valid("customer[note][同居家族構成]").value')
                span 本人
              label.c-checkbox.c-form__option
                input(type='checkbox' value='配偶者' name='customer[note][同居家族構成][]' x-model='valid("customer[note][同居家族構成]").value')
                span 配偶者
              label.c-checkbox.c-form__option
                input(type='checkbox' value='社会人のお子様' name='customer[note][同居家族構成][]' x-model='valid("customer[note][同居家族構成]").value')
                span 社会人のお子様
              label.c-checkbox.c-form__option
                input(type='checkbox' value='大学生のお子様' name='customer[note][同居家族構成][]' x-model='valid("customer[note][同居家族構成]").value')
                span 大学生のお子様
              label.c-checkbox.c-form__option
                input(type='checkbox' value='高校生のお子様' name='customer[note][同居家族構成][]' x-model='valid("customer[note][同居家族構成]").value')
                span 高校生のお子様
              label.c-checkbox.c-form__option
                input(type='checkbox' value='中学生のお子様' name='customer[note][同居家族構成][]' x-model='valid("customer[note][同居家族構成]").value')
                span 中学生のお子様
              label.c-checkbox.c-form__option
                input(type='checkbox' value='小学生のお子様' name='customer[note][同居家族構成][]' x-model='valid("customer[note][同居家族構成]").value')
                span 小学生のお子様
              label.c-checkbox.c-form__option
                input(type='checkbox' value='未就学のお子様' name='customer[note][同居家族構成][]' x-model='valid("customer[note][同居家族構成]").value')
                span 未就学のお子様
              label.c-checkbox.c-form__option
                input(type='checkbox' value='乳幼児' name='customer[note][同居家族構成][]' x-model='valid("customer[note][同居家族構成]").value')
                span 乳幼児
              label.c-checkbox.c-form__option
                input(type='checkbox' value='ご両親' name='customer[note][同居家族構成][]' x-model='valid("customer[note][同居家族構成]").value')
                span ご両親
              label.c-checkbox.c-form__option
                input(type='checkbox' value='その他' name='customer[note][同居家族構成][]' x-model='valid("customer[note][同居家族構成]").value')
                span その他
            p.error-message(x-show='valid("customer[note][同居家族構成]").errorMessage' x-text='valid("customer[note][同居家族構成]").errorMessage')


          .form-field.action-bottom
            input.btn.btn--full(type='submit' value='登録する')


script(src='//code.jquery.com/jquery-3.6.0.min.js' type='text/javascript')
script(src='//code.jquery.com/ui/1.12.1/jquery-ui.min.js' type='text/javascript')
script(src='//rawgit.com/jquery/jquery-ui/master/ui/i18n/datepicker-ja.js' type='text/javascript')
script(src='https://cdn.jsdelivr.net/gh/mattkingshott/iodine/dist/iodine.min.umd.js')
script.
  function form(){
    return {
      _validate:{},
      inputElements: [],
      update: function(event) {
        let valid = this.valid(this.getValidName(event.target));
        //- console.log(this.getObj(event.target.name))
        if (!valid) {
          return false;
        }
        //日付選択はdatepickerから選択するタイミングのfocusoutでエラーが出てしまうので除く
        //- console.log()
        //- if (event.target.name === 'customer[note][生年月日]') {
        //-   this.picker.showButtonPanel
        //-   //- console.log(event.type)
        //-   valid.blurred = false;
        //-   return false;
        //- }

        if (event.type === "focusout" || event.type == "change") {
          valid.blurred = true;
        }
        this.updateErrorMessages();
      },
      submit: function (event) {
        const invalidElements = this.inputElements.filter((ele) => {
          return Iodine.is(this.valid(this.getValidName(ele)).value, JSON.parse(ele.dataset.rules)) !== true;
        });
        if (invalidElements.length > 0) {
          event.preventDefault();
          //- document.getElementById(invalidElements[0].id).parentNode.parentNode.scrollIntoView();
          //- console.log(document.getElementById(invalidElements[0].id))
          //- console.log(document.getElementById(invalidElements[0].id).parentNode.parentNode)
          // 全部の入力項目をエラー表示の対象にするためblurredにする
          this.inputElements.map((ele) => {
            this.valid(this.getValidName(ele)).blurred = true;
          });
          this.updateErrorMessages();
        }
      },
      date(event){
        console.log("date")
        this.valid(event.target.name).errorMessage = this.getErrorMessage(event.target);
        Iodine.is(event.target.value, JSON.parse(['required']))
        this.updateErrorMessages()
        //- console.log(this.valid(event.target.name))
      },
      updateErrorMessages: function () {
        //- console.log(this._validate)
        this.inputElements.map((ele) => {
          this.valid(this.getValidName(ele)).errorMessage = this.getErrorMessage(ele);
        });
        //- console.log(this._validate)
      },
      getErrorMessage: function(ele){
        //- console.log(this.valid(this.getValidName(ele)).value)
        //- console.log(JSON.parse(ele.dataset.rules))
        const error = Iodine.is(this.valid(this.getValidName(ele)).value, JSON.parse(ele.dataset.rules));
        //- console.log(ele.name)
        console.log(error)

        if (error !== true && this.valid(this.getValidName(ele)).blurred) {
          return Iodine.getErrorMessage(error);
        }
        return '';
      },
      error(name){
        console.log("va")
        console.log(this.valid(this.getValidName(name)).errorMessege !== '')
        return this.valid(this.getValidName(name)).errorMessege !== ''
      },
      valid(name=''){
        return name != '' ? this._validate[name] : null
        //- return name != '' ? this._validate[name] : this._validate
      },
      setValid(name,data){
        this._validate[name] = data
      },
      getValidName(ele){
        return ele.dataset.name ? ele.dataset.name : ele.name.replace('][]',']')
      },
      init(){
        this.setCustomRules()
        this.inputElements = [...this.$el.querySelectorAll("[data-rules]")];
        this.initDomData()
        this.setValid('customer[note][生年月日]',{
          type:'date',
          errorMessage:'',
          blurred: false
        });
        $("#date_of_birth").datepicker({
          changeMonth: true,
          changeYear: true,
          dateFormat: 'yy-mm-dd',
          yearRange: '-90:-10',
          defaultDate: '-30y',
          onSelect: (dateText, inst) => {
            console.log("change")
            //- $("#date_of_birth").trigger('change')
            console.log(inst)
            //- Iodine.is(ele.value, JSON.parse(ele.dataset.rules)) !== true;
            this.valid('customer[note][生年月日]').burred = false;
            this.valid('customer[note][生年月日]').value = dateText;
            this.valid('customer[note][生年月日]').errorMessage = ''
            //- this.updateErrorMessages()
          }
        })
        .css('ime-mode', 'disabled')
        .attr('maxlength', '10');
        //- $('form').on('click','[data-handler=selectDay]',)
      },
      initDomData: function () {
        this.inputElements.map((ele) => {
          this.setValid(this.getValidName(ele) ,{
            type: ele.type ? 'input':'check',
            errorMessage:'',
            value: ele.dataset.name ? []:'' ,
            blurred: false
          })
        });
        //- console.log(this.customer)
        //- console.log(this.valid())
      },
      setCustomRules(){
        Iodine.addRule('requiredChoice', (value) => {
          return Iodine.isArray(value) ? value.length > 0 : value != ''
        });
        Iodine.messages.requiredChoice = "選択してください";
        Iodine.setErrorMessage("required", "入力してください");
        Iodine.setErrorMessage("email", "メールアドレスが正しくありません");
        Iodine.setErrorMessage("minLength", "[PARAM]文字以上で入力してください");
      }
    };
  }
script(src='https://unpkg.com/alpinejs@3.3.4/dist/cdn.min.js')

.st-doc
  :md
    # 防犯登録の店舗選択
    APIの仕様が確認できるまでの仮の構成
    モーダルの機能自体は.js-modalの方で実装している
    モーダルの動きに合わせて何かする場合は@clickとかで動作を追加すればOK
